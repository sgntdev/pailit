generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_PRISMA_URL") // uses a direct connection
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  roleId      Int           @default(3)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Role        Role          @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Kreditor    Kreditor[]
  Tagihan     Tagihan[]
  TagihanVote TagihanVote[]
}

model UserVerify {
  email          String   @id @unique
  uniqueCode     String   @unique @db.VarChar(25)
  expirationDate DateTime
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Debitor {
  id             Int            @id @default(autoincrement())
  nama           String
  tglSidang      String
  tempatSidang   String
  uid            String         @unique @db.VarChar(5)
  pengurusAccess Int[]
  Tagihan        Tagihan[]
  AssetSelling   AssetSelling[]
}

model Kreditor {
  id      Int       @id @default(autoincrement())
  userId  Int
  nama    String
  email   String
  alamat  String    @db.Text
  noTelp  String    @db.VarChar(13)
  User    User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tagihan Tagihan[]
}

model Tagihan {
  id              Int              @id @default(autoincrement())
  debitorId       Int
  userId          Int
  kreditorId      Int
  pertanggal      String
  hutangPokok     String
  bunga           String
  denda           String
  sifatTagihanId  Int
  jumlahTagihan   String
  mulaiTertunggak String
  jumlahHari      String
  totalVoters     Int              @default(0)
  verifiedVote    Int              @default(0)
  objectionVote   Int              @default(0)
  status          Int              @default(0)
  DokumenTagihan  DokumenTagihan[]
  Debitor         Debitor          @relation(fields: [debitorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User            User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Kreditor        Kreditor         @relation(fields: [kreditorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  SifatTagihan    SifatTagihan     @relation(fields: [sifatTagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  TagihanVote     TagihanVote[]
  tagihanItem     tagihanItem[]
}

model SifatTagihan {
  id          Int           @id @default(autoincrement())
  sifat       String
  Tagihan     Tagihan[]
  TipeDokumen TipeDokumen[]
  tagihanItem tagihanItem[]
}

model TipeDokumen {
  id             Int              @id @default(autoincrement())
  tipe           String
  sifatTagihanId Int
  DokumenTagihan DokumenTagihan[]
  SifatTagihan   SifatTagihan     @relation(fields: [sifatTagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model DokumenTagihan {
  id            Int         @id @default(autoincrement())
  tipeDokumenId Int
  tagihanId     Int
  nama_dokumen  String
  dokumen_url   String
  Tagihan       Tagihan     @relation(fields: [tagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  TipeDokumen   TipeDokumen @relation(fields: [tipeDokumenId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Verified {
  id             Int       @id @default(autoincrement())
  password       String
  uniqueCode     String?   @unique @db.VarChar(25)
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model TagihanVote {
  id        Int      @id @default(autoincrement())
  tagihanId Int
  userId    Int
  vote      Int
  User      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tagihan   Tagihan  @relation(fields: [tagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, tagihanId])
}

model tagihanItem {
  id             Int          @id @default(autoincrement())
  tagihanId      Int
  sifatTagihanId Int
  tipe           String
  amount         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  SifatTagihan   SifatTagihan @relation(fields: [sifatTagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tagihan        Tagihan      @relation(fields: [tagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model AssetSelling {
  id           Int     @id @default(autoincrement())
  debitorId    Int
  sellingPrice String
  Debitor      Debitor @relation(fields: [debitorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
